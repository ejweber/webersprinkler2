// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SprinklerToServerClient is the client API for SprinklerToServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SprinklerToServerClient interface {
	SendStatus(ctx context.Context, in *SprinklerStatusRequest, opts ...grpc.CallOption) (*SprinklerStatusResponse, error)
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error)
	GetScheduledPrograms(ctx context.Context, in *GetScheduledProgramsRequest, opts ...grpc.CallOption) (*GetScheduledProgramsResponse, error)
	RecieveCommands(ctx context.Context, in *RecieveCommandsRequest, opts ...grpc.CallOption) (SprinklerToServer_RecieveCommandsClient, error)
}

type sprinklerToServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSprinklerToServerClient(cc grpc.ClientConnInterface) SprinklerToServerClient {
	return &sprinklerToServerClient{cc}
}

func (c *sprinklerToServerClient) SendStatus(ctx context.Context, in *SprinklerStatusRequest, opts ...grpc.CallOption) (*SprinklerStatusResponse, error) {
	out := new(SprinklerStatusResponse)
	err := c.cc.Invoke(ctx, "/SprinklerToServer/SendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprinklerToServerClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error) {
	out := new(GetProgramResponse)
	err := c.cc.Invoke(ctx, "/SprinklerToServer/GetProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprinklerToServerClient) GetScheduledPrograms(ctx context.Context, in *GetScheduledProgramsRequest, opts ...grpc.CallOption) (*GetScheduledProgramsResponse, error) {
	out := new(GetScheduledProgramsResponse)
	err := c.cc.Invoke(ctx, "/SprinklerToServer/GetScheduledPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprinklerToServerClient) RecieveCommands(ctx context.Context, in *RecieveCommandsRequest, opts ...grpc.CallOption) (SprinklerToServer_RecieveCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SprinklerToServer_ServiceDesc.Streams[0], "/SprinklerToServer/RecieveCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &sprinklerToServerRecieveCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SprinklerToServer_RecieveCommandsClient interface {
	Recv() (*Command, error)
	grpc.ClientStream
}

type sprinklerToServerRecieveCommandsClient struct {
	grpc.ClientStream
}

func (x *sprinklerToServerRecieveCommandsClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SprinklerToServerServer is the server API for SprinklerToServer service.
// All implementations must embed UnimplementedSprinklerToServerServer
// for forward compatibility
type SprinklerToServerServer interface {
	SendStatus(context.Context, *SprinklerStatusRequest) (*SprinklerStatusResponse, error)
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error)
	GetScheduledPrograms(context.Context, *GetScheduledProgramsRequest) (*GetScheduledProgramsResponse, error)
	RecieveCommands(*RecieveCommandsRequest, SprinklerToServer_RecieveCommandsServer) error
	mustEmbedUnimplementedSprinklerToServerServer()
}

// UnimplementedSprinklerToServerServer must be embedded to have forward compatible implementations.
type UnimplementedSprinklerToServerServer struct {
}

func (UnimplementedSprinklerToServerServer) SendStatus(context.Context, *SprinklerStatusRequest) (*SprinklerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStatus not implemented")
}
func (UnimplementedSprinklerToServerServer) GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedSprinklerToServerServer) GetScheduledPrograms(context.Context, *GetScheduledProgramsRequest) (*GetScheduledProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledPrograms not implemented")
}
func (UnimplementedSprinklerToServerServer) RecieveCommands(*RecieveCommandsRequest, SprinklerToServer_RecieveCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecieveCommands not implemented")
}
func (UnimplementedSprinklerToServerServer) mustEmbedUnimplementedSprinklerToServerServer() {}

// UnsafeSprinklerToServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SprinklerToServerServer will
// result in compilation errors.
type UnsafeSprinklerToServerServer interface {
	mustEmbedUnimplementedSprinklerToServerServer()
}

func RegisterSprinklerToServerServer(s grpc.ServiceRegistrar, srv SprinklerToServerServer) {
	s.RegisterService(&SprinklerToServer_ServiceDesc, srv)
}

func _SprinklerToServer_SendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprinklerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprinklerToServerServer).SendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SprinklerToServer/SendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprinklerToServerServer).SendStatus(ctx, req.(*SprinklerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprinklerToServer_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprinklerToServerServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SprinklerToServer/GetProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprinklerToServerServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprinklerToServer_GetScheduledPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprinklerToServerServer).GetScheduledPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SprinklerToServer/GetScheduledPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprinklerToServerServer).GetScheduledPrograms(ctx, req.(*GetScheduledProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprinklerToServer_RecieveCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecieveCommandsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SprinklerToServerServer).RecieveCommands(m, &sprinklerToServerRecieveCommandsServer{stream})
}

type SprinklerToServer_RecieveCommandsServer interface {
	Send(*Command) error
	grpc.ServerStream
}

type sprinklerToServerRecieveCommandsServer struct {
	grpc.ServerStream
}

func (x *sprinklerToServerRecieveCommandsServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

// SprinklerToServer_ServiceDesc is the grpc.ServiceDesc for SprinklerToServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SprinklerToServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SprinklerToServer",
	HandlerType: (*SprinklerToServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendStatus",
			Handler:    _SprinklerToServer_SendStatus_Handler,
		},
		{
			MethodName: "GetProgram",
			Handler:    _SprinklerToServer_GetProgram_Handler,
		},
		{
			MethodName: "GetScheduledPrograms",
			Handler:    _SprinklerToServer_GetScheduledPrograms_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecieveCommands",
			Handler:       _SprinklerToServer_RecieveCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/sprinkler_to_server.proto",
}
